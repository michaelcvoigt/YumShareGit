//--------------------------------
//
// Voxels for Unity
//  Version: 1.10.3
//
// © 2014-17 by Ronny Burkersroda
//
//--------------------------------


using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.IO;


namespace Voxels
{

    /// <summary>
    /// Class to export incoming voxel data as point cloud to a .ply file
    /// </summary>
    public class PointCloudExporter : Processor
    {
        /// <summary>
        /// Target file path
        /// </summary>
        public string filePath;

        /// <summary>
        /// Author comment in output file
        /// </summary>
        public string assetAuthor;

        /// <summary>
        /// Building co-routine
        /// </summary>
        private IEnumerator coroutine = null;

        /// <summary>
        /// Current progress
        /// </summary>
        protected float progress = 0;


        /// <summary>
        /// Build point cloud data and store it to file
        /// </summary>
        /// <param name="voxels">Storage instance including collected voxels</param>
        /// <param name="bounds">Bounding box in absolute space</param>
        /// <param name="informer">Callback to report about finishing the creation of objects</param>
        /// <param name="parameter">Application-defined parameter for callback</param>
        /// <returns>Current progress</returns>
        public override float Build(Storage voxels, Bounds bounds, Informer informer, object parameter)
        {
            // Start co-routine at first call
            if (coroutine == null)
            {
                progress = 0;
                coroutine = CoBuild(voxels, bounds);
                if (coroutine != null)
                {
                    StartCoroutine(coroutine);
                }
            }

            // Unset co-routine at finish
            if (progress >= 1)
            {
                coroutine = null;
            }

            return progress;
        }

        /// <summary>
        /// Building function as co-routine 
        /// </summary>
        /// <param name="voxels">Storage instance including collected voxels</param>
        /// <param name="bounds">Bounding box in absolute space</param>
        /// <returns>Enumerator for co-routine processing</returns>
        protected virtual IEnumerator CoBuild(Storage voxels, Bounds bounds)
        {
            // Check for given array
            if (voxels != null)
            {
                // Create target file
                var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write);
                if (fileStream != null)
                {
                    // Create steam writer instance
                    var streamWriter = new StreamWriter(fileStream);
                    if (streamWriter != null)
                    {
                        // Store file header
                        streamWriter.WriteLine("ply");
                        streamWriter.WriteLine("format ascii 1.0");
                        if (assetAuthor != null && assetAuthor.Length > 0)
                        {
                            streamWriter.WriteLine("comment Author: " + assetAuthor);
                        }
                        streamWriter.WriteLine("obj_info Generated by Voxels for Unity");
                        streamWriter.WriteLine("element vertex " + voxels.Count.ToString());
                        streamWriter.WriteLine("property float x");
                        streamWriter.WriteLine("property float y");
                        streamWriter.WriteLine("property float z");
                        streamWriter.WriteLine("property float red");
                        streamWriter.WriteLine("property float green");
                        streamWriter.WriteLine("property float blue");
                        streamWriter.WriteLine("property float alpha");
                        streamWriter.WriteLine("end_header");

                        Voxels.Storage.Iterator iterator = voxels.GetIterator();
                        Material material;
                        int x, y, z;
                        int voxelIndex = 0;
                        Vector3 factor = new Vector3(bounds.size.x / voxels.Width, bounds.size.y / voxels.Height, bounds.size.z / voxels.Depth);

                        // Store material colors of all input voxels
                        while ((material = iterator.GetNextMaterial(out x, out y, out z)) != null)
                        {
                            streamWriter.WriteLine((x * factor.x + bounds.min.x) + " " + (y * factor.y + bounds.min.y) + " " + (z * factor.z + bounds.min.z) + " " + material.color.r + " " + material.color.g + " " + material.color.b + " " + material.color.a);

                            ++voxelIndex;
                        }

                        // Close file stream
                        streamWriter.Close();
                        streamWriter = null;
                    }

                    // Close file stream
                    fileStream.Close();
                    fileStream = null;
                }
            }

            // Finish function
            progress = 1;
            yield return null;
        }

    }

}
